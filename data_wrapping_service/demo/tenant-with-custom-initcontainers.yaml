apiVersion: v1
kind: Secret
metadata:
  name: myminio-env-configuration
  namespace: minio-tenant
type: Opaque
stringData:
  config.env: |-
    export MINIO_ROOT_USER="minio"
    export MINIO_ROOT_PASSWORD="minio123"
---
apiVersion: v1
kind: Secret
metadata:
  name: kes-configuration
  namespace: minio-tenant
type: Opaque
stringData:
  server-config.yaml: |-
    address: :7373
    tls:
      key: /tmp/kes/server.key # Path to the TLS private key
      cert: /tmp/kes/server.crt # Path to the TLS certificate
    admin:
      identity: ${MINIO_KES_IDENTITY}
    cache:
      expiry:
        any: 5m0s
        unused: 20s
    log:
      error: on
      audit: off
    keystore:
      vault:
        endpoint: "https://vault-internal.vault.svc.cluster.local:8200" # The Vault endpoint
        version: v2
        namespace: "" # An optional Vault namespace. See: https://www.vaultproject.io/docs/enterprise/namespaces/index.html
        prefix: "myminio" # An optional K/V prefix. The server will store keys under this prefix.
        kubernetes: # Kubernetes credentials. See: https://www.vaultproject.io/docs/auth/kubernetes
          role: "minio-kes" # The Kubernetes JWT role
          jwt: "/var/run/secrets/kubernetes.io/serviceaccount/token" # Either the JWT provided by K8S or a path to a K8S secret containing the JWT.
        tls: # The Vault client TLS configuration for certificate verification
          ca: "/tmp/vault/vault.ca" # Path to one or multiple PEM root CA certificates
        status: # Vault status configuration. The server will periodically reach out to Vault to check its status.
          ping: 10s # Duration until the server checks Vault's status again.
---
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  labels:
    app: minio
  name: myminio
  namespace: minio-tenant
spec:
  configuration:
    name: myminio-env-configuration
  exposeServices:
    console: true
    minio: true
  features:
    bucketDNS: false
    enableSFTP: false
  image: quay.io/minio/minio:RELEASE.2024-03-15T01-07-19Z
  imagePullPolicy: IfNotPresent
  # Workaround for https://github.com/kubernetes/examples/issues/260
  initContainers:
  - name: chown
    image: alpine
    securityContext:
      allowPrivilegeEscalation: false
      runAsUser: 0 # root
    command: [sh, -c]
    args:
    - chown -R 1000:1000 /export0 /export1 /export2 /export3
    volumeMounts:
    - name: data0
      mountPath: /export0
    - name: data1
      mountPath: /export1
    - name: data2
      mountPath: /export2
    - name: data3
      mountPath: /export3
  kes:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    image: quay.io/minio/kes:2024-03-13T17-52-13Z
    kesSecret:
      name: kes-configuration
    keyName: myminio-key
    replicas: 2
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: minio-kes
  mountPath: /export
  podManagementPolicy: Parallel
  pools:
  - containerSecurityContext:
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    name: pool-0
    securityContext:
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
      runAsGroup: 1000
      runAsNonRoot: false # allow execution of chown with root privileges
      runAsUser: 1000
    servers: 4
    volumeClaimTemplate:
      metadata:
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
    volumesPerServer: 4
  prometheusOperator: false
  requestAutoCert: true
  subPath: /data

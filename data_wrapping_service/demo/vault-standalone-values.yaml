global:
  enabled: true
  tlsDisable: false
injector:
  enabled: false
server:
  enabled: true
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
    limits:
      memory: 256Mi
      cpu: 250m
  extraEnvironmentVars:
    VAULT_CACERT: /vault/userconfig/vault-tls/ca.crt
  volumes:
    - name: userconfig-vault-tls
      secret:
        defaultMode: 420
        secretName: vault-tls # Matches the ${SECRET_NAME} from above
  volumeMounts:
    - mountPath: /vault/userconfig/vault-tls
      name: userconfig-vault-tls
      readOnly: true
  service:
    enabled: true
    type: NodePort
  dataStorage:
    enabled: true
    size: 10Gi
  auditStorage:
    enabled: true
    size: 10Gi
  ui:
    enabled: true
    serviceType: NodePort
  standalone:
    enabled: true
    config: |
      ui = true

      listener "tcp" {
        address = "[::]:8200"
        cluster_address = "[::]:8201"
        tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
        tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
        tls_client_ca_file = "/vault/userconfig/vault-tls/ca.crt"
      }

      storage "file" {
        path = "/vault/data"
      }
  # Workaround for https://github.com/kubernetes/examples/issues/260
  extraInitContainers:
    - name: chown
      image: alpine
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 0 # root
      command: [sh, -c]
      args:
        - chmod +x /vault/data; chown -R 100:1000 /vault/data # uid=vault, gid=vault
      volumeMounts:
        - name: data
          mountPath: /vault/data/
  # Allow executing the init container with root privileges
  statefulSet:
    securityContext:
      pod:
        fsGroup: 1000
        runAsGroup: 1000
        runAsNonRoot: false
        runAsUser: 100
      container:
        allowPrivilegeEscalation: false
        runAsNonRoot: true

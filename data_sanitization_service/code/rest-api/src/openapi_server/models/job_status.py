# coding: utf-8

"""
    Data Sanitization Service

    This service implements an efficient and effective approach to protect users data by obfuscating information that can disclose their identities and sensitive information.

    The version of the OpenAPI document: 0.1.0
    Contact: seclab@unibg.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobStatus(BaseModel):
    """
    Information about the status of the data sanitization job
    """ # noqa: E501
    error_message: Optional[StrictStr] = Field(default=None, description="Error message in case of failures", alias="errorMessage")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the data sanitization job")
    __properties: ClassVar[List[str]] = ["errorMessage", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('COMPLETED', 'FAILED', 'SUBMISSION_FAILED', 'FAILING', 'INVALIDATING', 'null', 'PENDING_RERUN', 'RUNNING', 'SUBMITTED', 'SUCCEEDING', 'UNKNOWN'):
            raise ValueError("must be one of enum values ('COMPLETED', 'FAILED', 'SUBMISSION_FAILED', 'FAILING', 'INVALIDATING', 'null', 'PENDING_RERUN', 'RUNNING', 'SUBMITTED', 'SUCCEEDING', 'UNKNOWN')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorMessage": obj.get("errorMessage"),
            "state": obj.get("state")
        })
        return _obj



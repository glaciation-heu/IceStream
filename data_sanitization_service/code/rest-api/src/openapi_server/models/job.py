# coding: utf-8

"""
    Data Sanitization Service

    This service implements an efficient and effective approach to protect users data by obfuscating information that can disclose their identities and sensitive information.

    The version of the OpenAPI document: 0.1.0
    Contact: seclab@unibg.it
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401



from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_server.models.k_anonymity_job import KAnonymityJob
from openapi_server.models.l_diversity_job import LDiversityJob
from openapi_server.models.mixed_job import MixedJob
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

JOB_ANY_OF_SCHEMAS = ["KAnonymityJob", "LDiversityJob"]

class Job(BaseModel):
    """
    Configuration of data sanitization job
    """

    # data type: KAnonymityJob
    anyof_schema_1_validator: Optional[KAnonymityJob] = None
    # data type: LDiversityJob
    anyof_schema_2_validator: Optional[LDiversityJob] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[KAnonymityJob, LDiversityJob]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[JOB_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
            self.actual_instance = args[0]
        else:
            super().__init__(**kwargs)
            self.actual_instance = Job.from_dict(kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        error_messages = []
        # validate data type: Job
        if not isinstance(v, Job):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Job`")
        else:
            return v
        
        # validate data type: MixedJob
        if not isinstance(v, MixedJob):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MixedJob`")
        else:
            return v

        # validate data type: KAnonymityJob
        if not isinstance(v, KAnonymityJob):
            error_messages.append(f"Error! Input type `{type(v)}` is not `KAnonymityJob`")
        else:
            return v

        # validate data type: LDiversityJob
        if not isinstance(v, LDiversityJob):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LDiversityJob`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in Job with anyOf schemas: KAnonymityJob, LDiversityJob. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[KAnonymityJob] = None
        try:
            instance.actual_instance = MixedJob.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_1_validator: Optional[KAnonymityJob] = None
        try:
            instance.actual_instance = KAnonymityJob.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[LDiversityJob] = None
        try:
            instance.actual_instance = LDiversityJob.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Job with anyOf schemas: KAnonymityJob, LDiversityJob. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



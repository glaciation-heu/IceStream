from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeSeries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_id=None, timeseries=None, time=None, aggregation_interval=None):  # noqa: E501
        """TimeSeries - a model defined in OpenAPI

        :param metric_id: The metric_id of this TimeSeries.  # noqa: E501
        :type metric_id: str
        :param timeseries: The timeseries of this TimeSeries.  # noqa: E501
        :type timeseries: List[float]
        :param time: The time of this TimeSeries.  # noqa: E501
        :type time: List[date]
        :param aggregation_interval: The aggregation_interval of this TimeSeries.  # noqa: E501
        :type aggregation_interval: int
        """
        self.openapi_types = {
            'metric_id': str,
            'timeseries': List[float],
            'time': List[date],
            'aggregation_interval': int
        }

        self.attribute_map = {
            'metric_id': 'metricId',
            'timeseries': 'timeseries',
            'time': 'time',
            'aggregation_interval': 'aggregation_interval'
        }

        self._metric_id = metric_id
        self._timeseries = timeseries
        self._time = time
        self._aggregation_interval = aggregation_interval

    @classmethod
    def from_dict(cls, dikt) -> 'TimeSeries':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TimeSeries of this TimeSeries.  # noqa: E501
        :rtype: TimeSeries
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_id(self) -> str:
        """Gets the metric_id of this TimeSeries.


        :return: The metric_id of this TimeSeries.
        :rtype: str
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id: str):
        """Sets the metric_id of this TimeSeries.


        :param metric_id: The metric_id of this TimeSeries.
        :type metric_id: str
        """

        self._metric_id = metric_id

    @property
    def timeseries(self) -> List[float]:
        """Gets the timeseries of this TimeSeries.


        :return: The timeseries of this TimeSeries.
        :rtype: List[float]
        """
        return self._timeseries

    @timeseries.setter
    def timeseries(self, timeseries: List[float]):
        """Sets the timeseries of this TimeSeries.


        :param timeseries: The timeseries of this TimeSeries.
        :type timeseries: List[float]
        """

        self._timeseries = timeseries

    @property
    def time(self) -> List[date]:
        """Gets the time of this TimeSeries.


        :return: The time of this TimeSeries.
        :rtype: List[date]
        """
        return self._time

    @time.setter
    def time(self, time: List[date]):
        """Sets the time of this TimeSeries.


        :param time: The time of this TimeSeries.
        :type time: List[date]
        """

        self._time = time

    @property
    def aggregation_interval(self) -> int:
        """Gets the aggregation_interval of this TimeSeries.


        :return: The aggregation_interval of this TimeSeries.
        :rtype: int
        """
        return self._aggregation_interval

    @aggregation_interval.setter
    def aggregation_interval(self, aggregation_interval: int):
        """Sets the aggregation_interval of this TimeSeries.


        :param aggregation_interval: The aggregation_interval of this TimeSeries.
        :type aggregation_interval: int
        """

        self._aggregation_interval = aggregation_interval
